
# This file was *autogenerated* from the file lll.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_39 = Integer(39); _sage_const_0p0 = RealNumber('0.0'); _sage_const_10 = Integer(10); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0p1 = RealNumber('0.1')
def is_LLL_reduced(B, c = _sage_const_2 ):
    n = B.nrows()
    m = B.ncols()
    U = matrix(RR, m, m)
    O = matrix(RR, n, m)
    for i in range(_sage_const_0 , m) :
        U[i,i] = _sage_const_1 
        O.set_column(i, B.column(i))
        for j in range(_sage_const_0 , i) :
            U[j,i] = (B.column(i)*O.column(j)) / (O.column(j)*O.column(j))
            O.set_column(i, O.column(i) - U[j,i]*O.column(j))
    for i in range(_sage_const_0 , m-_sage_const_1 ) :
        if O.column(i)*O.column(i) > c*O.column(i+_sage_const_1 )*O.column(i+_sage_const_1 ) :
            return False
        return True


def reduce(i, B, U):
    j = i-_sage_const_1 
    while j >= _sage_const_0  :
        B.set_column(i, B.column(i) - round(U[j,i])*B.column(j))
        U.set_column(i, U.column(i) - round(U[j,i])*U.column(j))
        j=j-_sage_const_1 


def LLL(B, c = _sage_const_2 ):
    n = B.nrows()
    m = B.ncols()
    U = matrix(RR, m, m)
    O = matrix(RR, n, m)
    for i in range(_sage_const_0 , m) :
        U[i,i] = _sage_const_1 
        O.set_column(i, B.column(i))
        for j in range(_sage_const_0 , i) :
            U[j,i] = (B.column(i)*O.column(j)) / (O.column(j)*O.column(j))
            O.set_column(i, O.column(i) - U[j,i]*O.column(j))
            reduce(i, B, U)
        i=_sage_const_0 
        while i < m-_sage_const_1  :
            if O.column(i)*O.column(i) <= c*O.column(i+_sage_const_1 )*O.column(i+_sage_const_1 ) :
                i=i+_sage_const_1 
            else :
                O.set_column(i+_sage_const_1 , O.column(i+_sage_const_1 ) + U[i,i+_sage_const_1 ]*O.column(i))
                U[i,i] = (B.column(i)*O.column(i+_sage_const_1 )) / (O.column(i+_sage_const_1 )*O.column(i+_sage_const_1 ))
                U[i+_sage_const_1 ,i] = _sage_const_1 
                U[i, i+_sage_const_1 ] = _sage_const_1 
                U[i+_sage_const_1 ,i+_sage_const_1 ] = _sage_const_0 
                O.set_column(i, O.column(i)-U[i,i]*O.column(i+_sage_const_1 ))
                U.swap_columns(i,i+_sage_const_1 )
                O.swap_columns(i,i+_sage_const_1 )
                B.swap_columns(i,i+_sage_const_1 )
                for k in range(i+_sage_const_2 , m) :
                    U[i,k] = (B.column(k)*O.column(i)) / (O.column(i)*O.column(i))
                    U[i+_sage_const_1 , k] = (B.column(k)*O.column(i+_sage_const_1 )) / (O.column(i+_sage_const_1 )*O.column(i+_sage_const_1 ))
                    if abs(U[i,i+_sage_const_1 ]) > _sage_const_0p5  : reduce(i+_sage_const_1 , B, U)
                    i = max(i-_sage_const_1 ,_sage_const_0 )
                return B

### LLL test
runtimes = []   
for i in range(_sage_const_0 , _sage_const_39 ) :
    runtimes.append(_sage_const_0p0 )
    for k in range(_sage_const_0 , _sage_const_10 ) :
        r=_sage_const_0 
        while r != i+_sage_const_2  :
            A = random_matrix(ZZ, i+_sage_const_2 )
            r = A.rank()
        t = cputime()
        res = LLL(A)
        runtimes[i] = runtimes[i] + cputime(t)*_sage_const_0p1 
        if is_LLL_reduced(res) == False :
            print("LLL FAILURE")
print(runtimes)

